apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
// Google Services plugin
apply plugin: 'com.google.gms.google-services'
// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.firebase-perf'
// Apply the App Distribution Gradle plugin
apply plugin: 'com.google.firebase.appdistribution'

import app.web.diegoflassa_site.littledropsofrain.buildsrc.Versions
import app.web.diegoflassa_site.littledropsofrain.buildsrc.Config

// Creates a variable called keystorePropertiesFile, and initializes it to the
// keystore.properties file.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initializes a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Loads the keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion Config.compileSdkVersion

    defaultConfig {
        applicationId Config.applicationId
        minSdkVersion Config.minimumSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    sourceSets {
        //DFL - Não use por enquanto
    }
    signingConfigs {
        // DFL - Configuração para assinar o APK. Nao se preocupe agora
        release {
            storeFile file(keystoreProperties['KEYSTORE_FILE'])
            storePassword keystoreProperties['KEYSTORE_PASSWORD']
            keyAlias keystoreProperties['KEYSTORE_ALIAS']
            keyPassword keystoreProperties['KEY_PASSWORD']
            v2SigningEnabled true
        }
    }
    buildTypes {
        debug {
			//applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
            firebaseAppDistribution {
                releaseNotesFile="${project.rootDir}/releaseNotes/releaseNotes.txt"
                testers="andrea.setecinco@gmail.com, diegoflassa@gmail.com"
            }
        }
        release {
            versionNameSuffix "-release"
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            firebaseAppDistribution {
                releaseNotesFile="${project.rootDir}/releaseNotes/releaseNotes.txt"
                testers="andrea.setecinco@gmail.com, diegoflassa@gmail.com"
            }
        }
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def appName = "littledropsofrain"
                outputFileName = "${appName}-${outputFileName}"
            }
        }
    }
    compileOptions {
        // Sets Java compatibility to Java 11
        targetCompatibility JavaVersion.VERSION_11
        sourceCompatibility JavaVersion.VERSION_11
    }
    buildFeatures {
        viewBinding = true
        // Enables Jetpack Compose for this module
        compose true
    }
    lintOptions {
        abortOnError false
    }

    buildToolsVersion Config.buildToolsVersion
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
    composeOptions {
        kotlinCompilerExtensionVersion Versions.androidxJetpackCompose
    }
}

// Avoid build error
gradle.taskGraph.whenReady {
	tasks.each { task ->
        if (task.name.contains("compileDebugUnitTestKotlin")||task.name.contains("compileReleaseUnitTestKotlin")
		//||
		) {
        //task.name.contains("uploadCrashlyticsMappingFile")) {
			// Uncomment if error occurs
			task.enabled = false
		}
	}
}

//Avoid the uploadCrashlyticsMappingFile error
afterEvaluate {
    def appExtension = extensions.findByName("android")
    appExtension.applicationVariants.each { variant ->
        Task uploadCrashlyticsTask = tasks.findByName("uploadCrashlyticsMappingFile${variant.name.capitalize()}")
        Task packageTask = tasks.findByName("package${variant.name.capitalize()}")
        Task packageBundleTask = tasks.findByName("package${variant.name.capitalize()}Bundle")
        if (uploadCrashlyticsTask != null && packageTask!= null) {
            println packageTask.name
            uploadCrashlyticsTask.mustRunAfter(packageTask)
        }
        if (uploadCrashlyticsTask != null && packageBundleTask != null) {
            println packageBundleTask.name
            uploadCrashlyticsTask.mustRunAfter(packageBundleTask)
        }
    }
}

// Avoid build error
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    // Sets Java compatibility to Java 11
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    kotlinOptions {
        useIR = true
        // Treat all Kotlin warnings as errors
        allWarningsAsErrors = true
        // Set the target vm version
        // DO NOT UPDATE or will get Class Not Found Exception
        jvmTarget = JavaVersion.VERSION_11.toString()
        // Use experimental APIs
        freeCompilerArgs += '-Xskip-prerelease-check'
    }
}

dependencies {

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:${Versions.workVersion}"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:${Versions.workVersion}"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:${Versions.workVersion}"

    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Volley
    implementation "com.android.volley:volley:${Versions.volley}"

    // Licenses
    implementation "com.google.android.gms:play-services-oss-licenses:${Versions.oss}"

    // UCrop
    implementation "com.github.yalantis:ucrop:${Versions.ucrop}"

    // Coil COroutines Image Loader
    implementation "io.coil-kt:coil:${Versions.coil}"


    // Jetpack Compose toolkit dependencies
    implementation "androidx.compose.ui:ui:${Versions.androidxJetpackCompose}"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:${Versions.androidxJetpackCompose}"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:${Versions.foundation}"
    // Material Design
    implementation "androidx.compose.material:material:${Versions.androidxJetpackCompose}"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:${Versions.androidxJetpackCompose}"
    implementation "androidx.compose.material:material-icons-extended:${Versions.androidxJetpackCompose}"
    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:${Versions.androidxJetpackCompose}"
    implementation "androidx.compose.runtime:runtime-rxjava2:${Versions.androidxJetpackCompose}"
    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test:${Versions.androidxJetpackCompose}"
	debugImplementation "androidx.compose.ui:ui-tooling:${Versions.androidxJetpackCompose}"
	debugImplementation "org.jetbrains.kotlin:kotlin-reflect:${Versions.reflect}" 


    // Import the BoM for the Firebase platform
    implementation platform("com.google.firebase:firebase-bom:${Versions.firebaseBOM}")
    // com.google.firebase
    implementation 'com.google.firebase:firebase-iid'
    // Add the Firebase SDK for Google Analytics
    // For an optimal experience using FCM, add the Firebase SDK
    // for Google Analytics. This is recommended, but not required.
    // Recommended: Add the Firebase SDK for Google Analytics.
    // Add the Firebase Crashlytics SDK.
    // Declare the dependencies for the Remote Config and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-appindexing'
    // Firebase Authentication (Kotlin)
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-database-ktx'
    // Add the SDK for Firebase Cloud Messaging
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-inappmessaging-ktx'
    implementation 'com.google.firebase:firebase-inappmessaging-display-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'
    // Firebase UI
    implementation "com.firebaseui:firebase-ui-auth:${Versions.auth}"
    implementation "com.firebaseui:firebase-ui-database:${Versions.database}"
    implementation "com.firebaseui:firebase-ui-storage:${Versions.storage}"
    // OAuth Library
    implementation "com.google.auth:google-auth-library-oauth2-http:${Versions.oauth2}"

    // GSon
    implementation "com.google.code.gson:gson:${Versions.gson}"

    implementation "com.google.android.gms:play-services-location:${Versions.location}"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${Versions.leakcanary}"

    // Google Sign In SDK (only required for Google Sign In)
    implementation "com.google.android.gms:play-services-auth:${Versions.play_services_auth}"
    implementation "com.google.android.material:material:${Versions.material}"
    implementation "com.google.android.gms:play-services-location:${Versions.play_services_location}"
    implementation "com.google.gms:google-services:${Versions.google_services}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.kotlinStdlibJdk8}"
    implementation "androidx.activity:activity-ktx:${Versions.activity_ktx}"
    implementation "androidx.annotation:annotation:${Versions.annotation}"
    implementation "androidx.appcompat:appcompat:${Versions.appcompat}"
    implementation "androidx.browser:browser:${Versions.browser}"
    implementation "androidx.constraintlayout:constraintlayout:${Versions.constraintlayout}"
    implementation "androidx.core:core-ktx:${Versions.core_ktx}"
    implementation "androidx.fragment:fragment-ktx:${Versions.fragment_ktx}"
    implementation "androidx.legacy:legacy-support-v4:${Versions.legacy_support_v4}"
    implementation "androidx.legacy:legacy-support-core-utils:${Versions.legacy_support_core_utils}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${Versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${Versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${Versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${Versions.lifecycle}"
    implementation "androidx.navigation:navigation-runtime-ktx:${Versions.navigation}"
    implementation "androidx.navigation:navigation-fragment-ktx:${Versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${Versions.navigation}"
    implementation "androidx.preference:preference-ktx:${Versions.preference_ktx}"
    implementation "androidx.recyclerview:recyclerview:${Versions.recyclerview}"
    implementation "androidx.recyclerview:recyclerview-selection:${Versions.recyclerview_selection}"
    implementation "androidx.room:room-runtime:${Versions.room}"
    implementation "androidx.room:room-ktx:${Versions.room}"
    implementation "androidx.vectordrawable:vectordrawable-animated:${Versions.vectordrawable_animated}"


    // Icons
    implementation "com.joanzapata.iconify:android-iconify-fontawesome:${Versions.iconify}" // (v4.5)
    implementation "com.joanzapata.iconify:android-iconify-entypo:${Versions.iconify}" // (v3,2015)
    implementation "com.joanzapata.iconify:android-iconify-typicons:${Versions.iconify}" // (v2.0.7)
    implementation "com.joanzapata.iconify:android-iconify-material:${Versions.iconify}" // (v2.0.0)
    implementation "com.joanzapata.iconify:android-iconify-material-community:${Versions.iconify}" // (v1.4.57)
    implementation "com.joanzapata.iconify:android-iconify-meteocons:${Versions.iconify}" // (latest)
    implementation "com.joanzapata.iconify:android-iconify-weathericons:${Versions.iconify}" // (v2.0)
    implementation "com.joanzapata.iconify:android-iconify-simplelineicons:${Versions.iconify}" // (v1.0.0)
    implementation "com.joanzapata.iconify:android-iconify-ionicons:${Versions.iconify}" // (v2.0.1)

    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-common-java8:${Versions.lifecycle}"
    kapt "androidx.databinding:databinding-compiler-common:${Versions.databinding}"
    kapt "androidx.room:room-compiler:${Versions.room}"

    // Testing dependencies
    androidTestImplementation  "androidx.annotation:annotation:${Versions.annotation}"
    androidTestImplementation  "androidx.test:core:${Versions.core}"
    // Removed temporary due to compiler error : Could not find androidx.test.espresso:3.4.0-alpha02
    // androidTestImplementation  "androidx.test.espresso-core:${Versions.expresso}"
    androidTestImplementation  "androidx.test.ext:junit-ktx:${Versions.junit_ktx}"
    androidTestImplementation  "androidx.test:rules:${Versions.rules}"
    androidTestImplementation  "androidx.test:runner:${Versions.runner}"

    androidTestImplementation  "junit:junit:${Versions.junit}"
}
